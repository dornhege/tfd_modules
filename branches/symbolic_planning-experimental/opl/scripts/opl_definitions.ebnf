# OPL grammar version 0.2
<ws> := [     
]+
#<single_comment> := '/', '/', -'\n'*, '\n'
#<multi_comment> := '/', '*', -('*','/')*, '*', '/'
<lbrace> := ws?, '{', ws?
<rbrace> := ws?, '}', ws?
<lbracket> := ws?, '(', ws?
<rbracket> := ws?, ')', ws?
<semicolon> := ws?, ';', ws?
<comma> := ws?, ',', ws?
<colon> := ws?, ':', ws?
name := [a-zA-Z_], [a-zA-Z0-9_]*

# domain
file := ws?, domain, !, ws?
domain := 'Domain', !, ws, name, lbrace, (type / action / module / effectmodule / fluent)*, rbrace
type := 'Type', !, ws, name, (colon, name)?, lbrace, (action / module / effectmodule / fluent)*, rbrace
<module> := ( ('ConditionModule' / 'CostModule'), !, ws, name, optional_arguments?, semicolon)
<effectmodule> := 'EffectModule', !, ws, name, lbrace, (symbol, semicolon)*, rbrace
<fluent> := ('boolean' / 'number' / name), !, ws, name, optional_arguments?, semicolon
<action> := 'Action', !, ws, name, optional_arguments?,lbrace, cost, at_start_condition, over_all_condition, at_start_effect, at_end_effect, rbrace
>optional_arguments< := lbracket, argument,(comma, argument)*, rbracket
>argument< := name, ws, name
cost := 'Cost', !, lbrace, number / symbol, semicolon, rbrace
at_start_condition := 'AtStartCondition', !, lbrace, (function / symbol), semicolon, rbrace
over_all_condition := 'OverAllCondition', !, lbrace, (function / symbol), semicolon, rbrace
at_start_effect := 'AtStartEffect', !, lbrace, (function / symbol), semicolon, rbrace
at_end_effect := 'AtEndEffect', !, lbrace, (function / symbol), semicolon, rbrace
function := function_name, lbracket, !, (function / symbol), (comma, (function / symbol))*, rbracket
>function_name< := 'and' / 'or' / 'not' / 'assign' / 'equals'
symbol := (('this', !) / (name, !,(lbracket, symbol, (comma, symbol)*, rbracket)?) ), ('.', scoped_symbol)?
scoped_symbol := name,(lbracket, symbol, (comma, symbol)*, rbracket)?, ('.', scoped_symbol)?

# problem
problem := 'Problem', !, name, lbracket, name, rbracket, lbrace, (object / initialization)*, goal, rbrace
object := name, name, semicolon / (lbrace, (initialization)*, rbrace)
initialization := name / (name, '=', number) / (name, '=', name)
goal := 'Goal', !, lbrace, function, rbrace
